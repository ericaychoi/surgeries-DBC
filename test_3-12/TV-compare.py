

# This file was *autogenerated* from the file linux_share/test_3-12/TV-compare.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5)#docker pull computop/sage

#docker run -it --mount type=bind,source="G:\My Drive\Summer Research 2020\Data\Master",target=/home/sage/linux_share computop/sage

#sage

import snappy
import regina
import math
import os.path
import copy

knotList = []
DTList = []
pList = []
qList = []


# Check if there's a working list of knots and slopes. If not, generate this working list based on the list of failed slopes (in "failList.txt") from HF-Casson-compare.

if (os.path.exists("linux_share/test_3-12/whatsLeft.txt") == False):
    with open('linux_share/test_3-12/failList.txt', 'r') as firstfile, open('linux_share/test_3-12/whatsLeft.txt', 'w') as secondfile:
        for line in firstfile:
            secondfile.write(line)

# Load the (existing) working list.

f = open('linux_share/test_3-12/whatsLeft.txt', 'r')
whatsLeftPrevious = f.readlines()
f.close()

# Now we'll make a new working list that eliminates any cases completed by a previous iteration of this script.

whatsLeft = []

for x in whatsLeftPrevious:
    if (x != "Done!\n"):
        whatsLeft.append(copy.deepcopy(x))
        data = x.strip("\n").split(";")
        knotList.append(data[_sage_const_0 ].strip(" "))
        DTList.append(data[_sage_const_1 ].strip(" "))
        pList.append(int(data[_sage_const_2 ].strip(" p = ")))
        qstrings = data[_sage_const_3 ].strip(" q = ").strip("[").strip("]").split(',')
        qvals = []
        for i in range(_sage_const_0 ,len(qstrings)):
            qvals.append(int(qstrings[i]))
        qList.append(qvals)

with open('linux_share/test_3-12/whatsLeft.txt', 'w') as outfile:
    outfile.writelines(whatsLeft)

progress_report = []
output_log = []



if (os.path.exists('linux_share/test_3-12/progress.txt') == False):
    with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
        outfile.write("Preparing to compare Turaev-Viro invariants of DBC's and surgeries for the given knots.")

f = open('linux_share/test_3-12/progress.txt', 'r')
progressLines = f.readlines()
f.close()

# [Explain what's happening here.]

state1 = "[working on T-V invariant of DBC]"
state2 = "[working on T-V invariant of surgery]"
state0 = "[moving on to next knot]"

state = _sage_const_0 

if state1 in progressLines[-_sage_const_1 ]:
    state = _sage_const_1 

if state2 in progressLines[-_sage_const_1 ]:
    state = _sage_const_2 
    del progressLines[-_sage_const_1 ]

with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
    outfile.writelines(progressLines)

newqList = copy.deepcopy(qList)

# [put comments in below to indicate when a progress update is happening.]

for k in range(_sage_const_0 ,len(knotList)):
    fail = _sage_const_0 
    p = pList[k]
    turaevViroCalculated = _sage_const_0 
    print(knotList[k])
    comment = "\n"+"Calculating Turaev-Viro invariants for K = "+str(knotList[k])
    progress_report.append(comment)
    if (state == _sage_const_0 ):
        progressLines.append(comment+"\n")
        state = _sage_const_1 
        progressLines.append(state1)
        with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
            outfile.writelines(progressLines)            
    K=snappy.Manifold(DTList[k])
    if (turaevViroCalculated == _sage_const_0 ):
        C=K.covers(_sage_const_2 )[_sage_const_0 ]
        C.dehn_fill((_sage_const_1 ,_sage_const_0 ),_sage_const_0 )
        Cfill=C.filled_triangulation()
        isosigCover=Cfill.triangulation_isosig()
        CoverTri=regina.Triangulation3.fromIsoSig(isosigCover)
        CoverTri.intelligentSimplify()
        tvCover = CoverTri.turaevViro(_sage_const_5 ,alg=regina.ALG_TREEWIDTH)
        turaevViroCalculated = _sage_const_1 
        print(tvCover)
        comment = "T-V of DBC is "+str(tvCover)
        progress_report.append(comment)
        if (state == _sage_const_1 ):
            progressLines[-_sage_const_1 ] = comment+"\n"
            state = _sage_const_2 
            with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
                outfile.writelines(progressLines)            
    for q in qList[k]:
        progressLines.append(state2)
        with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
            outfile.writelines(progressLines)
        state = _sage_const_2 
        Y=K
        Y.dehn_fill((p,q),_sage_const_0 )
        Yfill=Y.filled_triangulation()
        isosigSurgery=Yfill.triangulation_isosig()
        SurgeryTri=regina.Triangulation3.fromIsoSig(isosigSurgery)
        SurgeryTri.intelligentSimplify()
        tvSurgery = SurgeryTri.turaevViro(_sage_const_5 ,alg=regina.ALG_TREEWIDTH)
        print(tvSurgery)
        comment = "T-V of surgery with q = "+str(q)+" is "+str(tvSurgery)
        progress_report.append(comment)
        progressLines[-_sage_const_1 ] = comment+"\n"
        with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
            outfile.writelines(progressLines)
        if (tvSurgery == tvCover):
            if fail == _sage_const_0 :
                fail_values = []
            temp='Failed to distinguish using Turaev-Viro invariants; for q = '+str(q)+'; both Turaev-Viro invariants equal'+str(tvSurgery)
            output_log.append(temp)
            with open('linux_share/test_3-12/progress.txt', 'a') as outfile:
                outfile.write("\n")
                outfile.write(temp)
            fail = _sage_const_1 
            fail_values.append(q)
        else:
            newqList[k].remove(q)
            whatsLeft[k] = str(knotList[k])+"; "+DTList[k]+"; p = "+str(p)+"; q = "+str(newqList[k])+"\n"
            with open('linux_share/test_3-12/whatsLeft.txt', 'w') as outfile:
                outfile.writelines(whatsLeft)
        if newqList[k] == []:
            whatsLeft[k] = "Done!"+"\n"
            with open('linux_share/test_3-12/whatsLeft.txt', 'w') as outfile:
                outfile.writelines(whatsLeft)
    if fail == _sage_const_0 :
        progressLines.append("Successfully distinguished remaining surgeries from DBC."+"\n")
        with open('linux_share/test_3-12/progress.txt', 'w') as outfile:
            outfile.writelines(progressLines)
    state = _sage_const_0 

